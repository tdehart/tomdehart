---
layout: post
title:  "Blame the Bank Teller"
date:   2013-08-19 08:20:25
categories: blog
excerpt: "How a lack of usability can lead to bank fraud"
---

One of my first jobs was as a part-time bank teller at a popular national banking institution in the northeast US. It was actually pretty stressful for a job that paid $8.50 an hour. Tens of thousands of dollars would pass through our hands every night as we cashed payroll checks, took large deposits from local businesses, and dealt with the occasional withdrawal. At our particularly busy branch (which didn't close until 8PM every night) we had lines out the door and cars wrapped around the building in the drivethrough. With all of the money we dealt with it was fairly common for someone's drawer to be out of balance, which caused everyone to stay late for recounts. On top of this, we were always on the lookout for fraud: forged signatures, fake checks, and counterfeit bills were among the most common offenses. 

The software we used for handling transactions attempted to help detect potential fraud. For example the system detected large variance in check amounts, gaps between check numbers, duplicate checks, and much more. These warnings were often quite wordy and required us to scroll through the message in a very limited space on our screens. Additionally, any time these alerts were triggered we had to enter a password into the system to proceed with the transaction. As young adults with little regard for security, a meager hourly wage, and the bank manager breathing down our necks to clear out the 20 customers waiting in line, we cut a lot of corners. We ignored almost every warning the system threw at us. We gave check signatures only cursory glances when comparing them to what we had in the system. We shortened our passwords to sequences that could easily be keyed in with the numpad (like the ever-secure "123456"). Some warnings required elevated overrides so our supervisors would often share their passwords with everyone in order to move through customers more quickly. As a result of these practices our bank was responsible for approving numerous fraudulent transactions.

Unfortunately I was responsible for one of these transactions: I cashed a fake payroll check for just under $500, the limit that we usually need supervisor approval for. The person that cashed the check used a fake ID and the signature on the back of the check didn't quite match what we had in the system, and if I had done a serious comparison of the two signatures I probably would have caught it. At the time I was ashamed but learned that it was fairly common and that many long-time tellers at our branch had processed fraudulent transactions at one point or another. I wasn't fired but instead was invited to a 'training' session along with over a dozen others that had also cashed fraudulent checks.

They sat us down in a conference room with product managers of the banking software and showed us examples of the warning messages that we neglected to read. They asked us why we didn't heed this cautionary information when it was in front of our faces and why we entered our passwords to bypass it. Many of the accused tellers sat in silent shame as they were being blamed for their failures. A few of us, perhaps realizing we weren't getting paid enough for this, simply told the truth: we didn't care. We didn't care what the warning messages said. There was a warning for almost every transaction and every single one required our password to override. With thousands of transactions on a weekly basis we became numb to the warning messages.

In hindsight this was probably not the safest thing to say to your employer, however, it got the whole room talking and we realized that everyone had similar feelings. We talked about how the area on the screen dedicated to warnings was too small and the messages were too long. There were too many warning messages and too little time. Password overrides were inconsistent and required far too often. Our feedback originally started out spiteful but ended up being extremely productive. I quit that job soon after and didn't get to see if they took our complaints and made any changes to the system but the product managers did seem thankful.

Back then I hadn't even heard of the term usability yet I still remember this as one of the first times it had a huge impact that was clearly visible. Check fraud is a serious problem in the United States that cost banks [hundreds of millions of dollars](http://www.aba.com/Products/Surveys/Pages/2011DepositAccount.aspx) every year. In that one 'training' session alone there was at least $5,000 worth of fraud that the company had to write off. As is often the case, [the users were the ones being blamed](http://www.nngroup.com/articles/actionable-usability-findings/). The bank tellers simply didn't pay attention to the warnings or didn't follow their training. The system clearly told them something was wrong so it was their fault. Software engineering is much more concerned with usability these days, though I'm still often reminded of this story whenever a fellow developer starts complaining about the 'stupid users'.
